//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.stage
{

public sealed partial class Respawn :  Bright.Config.BeanBase 
{
    public Respawn(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  Id = _json["id"]; }
        { if(!_json["prefabName"].IsString) { throw new SerializationException(); }  PrefabName = _json["prefabName"]; }
        { var _json2 = _json["respawnPoint"]; if(!_json2.IsObject) { throw new SerializationException(); } float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } float __z; { if(!_json2["z"].IsNumber) { throw new SerializationException(); }  __z = _json2["z"]; }  RespawnPoint = new UnityEngine.Vector3(__x, __y,__z); }
        { var _json2 = _json["rotation"]; if(!_json2.IsObject) { throw new SerializationException(); } float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } float __z; { if(!_json2["z"].IsNumber) { throw new SerializationException(); }  __z = _json2["z"]; }  Rotation = new UnityEngine.Vector3(__x, __y,__z); }
        { var _json1 = _json["patrolPoints"]; if(!_json1.IsArray) { throw new SerializationException(); } int _n = _json1.Count; PatrolPoints = new UnityEngine.Vector3[_n]; int _index=0; foreach(JSONNode __e in _json1.Children) { UnityEngine.Vector3 __v;  { var _json2 = __e; if(!_json2.IsObject) { throw new SerializationException(); } float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } float __z; { if(!_json2["z"].IsNumber) { throw new SerializationException(); }  __z = _json2["z"]; }  __v = new UnityEngine.Vector3(__x, __y,__z); }  PatrolPoints[_index++] = __v; }   }
        { if(!_json["maxChaseDistance"].IsNumber) { throw new SerializationException(); }  MaxChaseDistance = _json["maxChaseDistance"]; }
        PostInit();
    }

    public Respawn(int id, string prefabName, UnityEngine.Vector3 respawnPoint, UnityEngine.Vector3 rotation, UnityEngine.Vector3[] patrolPoints, float maxChaseDistance ) 
    {
        this.Id = id;
        this.PrefabName = prefabName;
        this.RespawnPoint = respawnPoint;
        this.Rotation = rotation;
        this.PatrolPoints = patrolPoints;
        this.MaxChaseDistance = maxChaseDistance;
        PostInit();
    }

    public static Respawn DeserializeRespawn(JSONNode _json)
    {
        return new stage.Respawn(_json);
    }

    public int Id { get; private set; }
    public string PrefabName { get; private set; }
    public UnityEngine.Vector3 RespawnPoint { get; private set; }
    public UnityEngine.Vector3 Rotation { get; private set; }
    public UnityEngine.Vector3[] PatrolPoints { get; private set; }
    public float MaxChaseDistance { get; private set; }

    public const int __ID__ = 598104600;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "PrefabName:" + PrefabName + ","
        + "RespawnPoint:" + RespawnPoint + ","
        + "Rotation:" + Rotation + ","
        + "PatrolPoints:" + Bright.Common.StringUtil.CollectionToString(PatrolPoints) + ","
        + "MaxChaseDistance:" + MaxChaseDistance + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
