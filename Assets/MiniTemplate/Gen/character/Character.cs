//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.character
{

public sealed partial class Character :  Bright.Config.BeanBase 
{
    public Character(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  Id = _json["id"]; }
        { if(!_json["name"].IsString) { throw new SerializationException(); }  Name = _json["name"]; }
        { var _json2 = _json["respawnPos"]; if(!_json2.IsObject) { throw new SerializationException(); } float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } float __z; { if(!_json2["z"].IsNumber) { throw new SerializationException(); }  __z = _json2["z"]; }  RespawnPos = new UnityEngine.Vector3(__x, __y,__z); }
        { if(!_json["maxHp"].IsNumber) { throw new SerializationException(); }  MaxHp = _json["maxHp"]; }
        { if(!_json["walkSpeed"].IsNumber) { throw new SerializationException(); }  WalkSpeed = _json["walkSpeed"]; }
        { if(!_json["runspeed"].IsNumber) { throw new SerializationException(); }  Runspeed = _json["runspeed"]; }
        { if(!_json["jumpSpeed"].IsNumber) { throw new SerializationException(); }  JumpSpeed = _json["jumpSpeed"]; }
        PostInit();
    }

    public Character(int id, string name, UnityEngine.Vector3 respawnPos, float maxHp, float walkSpeed, float runspeed, float jumpSpeed ) 
    {
        this.Id = id;
        this.Name = name;
        this.RespawnPos = respawnPos;
        this.MaxHp = maxHp;
        this.WalkSpeed = walkSpeed;
        this.Runspeed = runspeed;
        this.JumpSpeed = jumpSpeed;
        PostInit();
    }

    public static Character DeserializeCharacter(JSONNode _json)
    {
        return new character.Character(_json);
    }

    public int Id { get; private set; }
    public string Name { get; private set; }
    public UnityEngine.Vector3 RespawnPos { get; private set; }
    public float MaxHp { get; private set; }
    public float WalkSpeed { get; private set; }
    public float Runspeed { get; private set; }
    public float JumpSpeed { get; private set; }

    public const int __ID__ = -259077500;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "RespawnPos:" + RespawnPos + ","
        + "MaxHp:" + MaxHp + ","
        + "WalkSpeed:" + WalkSpeed + ","
        + "Runspeed:" + Runspeed + ","
        + "JumpSpeed:" + JumpSpeed + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
