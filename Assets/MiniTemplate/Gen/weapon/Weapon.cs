//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.weapon
{

public sealed partial class Weapon :  Bright.Config.BeanBase 
{
    public Weapon(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  Id = _json["id"]; }
        { if(!_json["name"].IsString) { throw new SerializationException(); }  Name = _json["name"]; }
        { if(!_json["filename"].IsString) { throw new SerializationException(); }  Filename = _json["filename"]; }
        { var _json2 = _json["positionOffset"]; if(!_json2.IsObject) { throw new SerializationException(); } float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } float __z; { if(!_json2["z"].IsNumber) { throw new SerializationException(); }  __z = _json2["z"]; }  PositionOffset = new UnityEngine.Vector3(__x, __y,__z); }
        { var _json2 = _json["rotateOffset"]; if(!_json2.IsObject) { throw new SerializationException(); } float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } float __z; { if(!_json2["z"].IsNumber) { throw new SerializationException(); }  __z = _json2["z"]; }  RotateOffset = new UnityEngine.Vector3(__x, __y,__z); }
        { var _json2 = _json["scale"]; if(!_json2.IsObject) { throw new SerializationException(); } float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } float __z; { if(!_json2["z"].IsNumber) { throw new SerializationException(); }  __z = _json2["z"]; }  Scale = new UnityEngine.Vector3(__x, __y,__z); }
        { var _json1 = _json["hitPointPos"]; if(!_json1.IsArray) { throw new SerializationException(); } int _n = _json1.Count; HitPointPos = new UnityEngine.Vector3[_n]; int _index=0; foreach(JSONNode __e in _json1.Children) { UnityEngine.Vector3 __v;  { var _json2 = __e; if(!_json2.IsObject) { throw new SerializationException(); } float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } float __z; { if(!_json2["z"].IsNumber) { throw new SerializationException(); }  __z = _json2["z"]; }  __v = new UnityEngine.Vector3(__x, __y,__z); }  HitPointPos[_index++] = __v; }   }
        { var _json1 = _json["hitLinePos"]; if(!_json1.IsArray) { throw new SerializationException(); } int _n = _json1.Count; HitLinePos = new UnityEngine.Vector3[_n]; int _index=0; foreach(JSONNode __e in _json1.Children) { UnityEngine.Vector3 __v;  { var _json2 = __e; if(!_json2.IsObject) { throw new SerializationException(); } float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } float __z; { if(!_json2["z"].IsNumber) { throw new SerializationException(); }  __z = _json2["z"]; }  __v = new UnityEngine.Vector3(__x, __y,__z); }  HitLinePos[_index++] = __v; }   }
        PostInit();
    }

    public Weapon(int id, string name, string filename, UnityEngine.Vector3 positionOffset, UnityEngine.Vector3 rotateOffset, UnityEngine.Vector3 scale, UnityEngine.Vector3[] hitPointPos, UnityEngine.Vector3[] hitLinePos ) 
    {
        this.Id = id;
        this.Name = name;
        this.Filename = filename;
        this.PositionOffset = positionOffset;
        this.RotateOffset = rotateOffset;
        this.Scale = scale;
        this.HitPointPos = hitPointPos;
        this.HitLinePos = hitLinePos;
        PostInit();
    }

    public static Weapon DeserializeWeapon(JSONNode _json)
    {
        return new weapon.Weapon(_json);
    }

    public int Id { get; private set; }
    public string Name { get; private set; }
    public string Filename { get; private set; }
    public UnityEngine.Vector3 PositionOffset { get; private set; }
    public UnityEngine.Vector3 RotateOffset { get; private set; }
    public UnityEngine.Vector3 Scale { get; private set; }
    public UnityEngine.Vector3[] HitPointPos { get; private set; }
    public UnityEngine.Vector3[] HitLinePos { get; private set; }

    public const int __ID__ = 986069582;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "Filename:" + Filename + ","
        + "PositionOffset:" + PositionOffset + ","
        + "RotateOffset:" + RotateOffset + ","
        + "Scale:" + Scale + ","
        + "HitPointPos:" + Bright.Common.StringUtil.CollectionToString(HitPointPos) + ","
        + "HitLinePos:" + Bright.Common.StringUtil.CollectionToString(HitLinePos) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
